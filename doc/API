API guidelines
==============

- Provide an easy API that provides multiple streams over a single connection

- The exact SPDY functionality and protocol details are not exposed to the
  application. Usage of this API shall require no intimate knowledge of SPDY.

- Transport layer agnostic. Spindly functions read from and send to memory
  buffers to allow the application to send/recv data in whatever way it thinks
  is fine

- No global data, everything thread-safe. No thread code used.

- Keep internal data/structs private and hidden from the app

- Try make the API work for multiple SPDY protocol versions

- Attempt to avoid superfluous memory copies

- Allow applications to completely replace the default memory functions

Handling of the "physical" connection
=====================================

PHYS = spindly_phys_init(SIDE, PROTVER, CONFIG)

  Create a handle for a single duplex connection, SIDE is either client or
  server - what side the handle is made to handle. PROTVER is the specific
  SPDY protocol version.

  CONFIG can be NULL to accept internal defaults.

  CONFIG struct fields:

    age      - should be set to SPINDLY_CONFIG_AGE when SETting a config
    customp  - custom pointer passed in to all callbacks
    malloc   - callback to be called instead of malloc
    realloc  - callback to be called instead of realloc
    free     - callback to be called instead of free
    demuxed  - callback called when incoming data passed in with
               spindly_phys_incoming() has been consumed
    data     - optional callback called when outgoing data is available, as an
               alternative to polling with spindly_phys_outgoing

  A PHYS handle will hold default values for all SETTINGS and for client-side
  handles it will keep persistent SETTINGS.

RESULT = spindly_phys_incoming(PHYS, DATA, DATALEN, IDENTIFIER);

  when the application has read data off the transport, this function is
  called to tell Spindly about more data that has arrived. As spindly doesn't
  read any network data by itself, it needs to get the data passed into it by
  the application.

  After data has been fed into the handle, call spindly_phys_demux() to make
  it demux the incoming data.

  Data is not copied immediately by spindly in this funtion. It will use the
  data as pointed to, so it is important that the application maintains the
  data untouched in that buffer until spindly is done with it. Data will be
  used from within the spindly_phys_demux() function and CONFIG->demuxed will
  be called with the IDENTIFIER pointer when this block of data has been
  handled.

  This function will have some means to return information that it couldn't
  accept any more data. When that happens, spindly_phys_demux() needs to be
  called to drain the input queue somewhat first before
  spindly_phys_incoming() can be called again.

  RECOMMENDATION: feed as large data chunks as possible into this function

RESULT = spindly_phys_demux(PHYS, &MESSAGE)

  Returns information about incoming messages on the connection, split up for
  consumption accordingly. Subsequent calls will return the next result and so
  on until there's nothing left to demux - until spindly_phys_incoming() is
  called again to feed it with more data. Not that when it returns that there
  is no more message, it may still hold trailing data that forms the beginning
  of the subsequent message.

  When a piece of data passed in with spindly_phys_incoming() has been fully
  handled (which it needs to be even if the trailing part isn't a complete
  packet/frame), the CONFIG->demuxed callback must be called (if set).

  When spindly_phys_demux() is called. Everything that was handed over in a
  previous call must've been copied by the application before
  spindly_phys_demux() is called again.

  If RESULT is OK, MESSAGE will tell which message that was received

  SPINDLY_DX_NONE - no more (complete) message in the struct, demux more!
 
  SPINDLY_DX_GOAWAY - shut down the entire PHYS. See spindly_phys_cleanup()

  SPINDLY_DX_STREAM_ACK - a previous call to spindly_stream_new() has been
    acked and the associated STREAM struct can be used/extracted now

  SPINDLY_DX_STREAM_REQ - a request for a new stream from the peer was
    received and you should ack or nack it. see spindly_stream_ack() and
    spindly_stream_nack()

  SPINDLY_DX_STREAM_KILL - a stream has been closed, the associated STREAM
    can no longer be used and should be closed. see spindly_stream_close()

  SPINDLY_DX_SETTINGS - one or more settings have been updated, some info
    about which settings that were updated needs to be provided.
    TODO: provide more help for serving/keeping persistent SETTINGS

  SPINDLY_DX_PING - a ping was received (and a response have been created
    in the output queue). This is for informational purposes only and there's
    no extra action required on the application's behalf.

  SPINDLY_DX_DATA - data arrived to a specific STREAM, pointer and size
    are provided

  SPINDLY_DX_HEADERS - headers arrived to a specific STREAM

RESULT = spindly_phys_outgoing(PHYS, &DATA, &LENGTH);

  Will return info (pointer and length) with data that is ready to send over
  the transport medium immediately. This function may return data in multiple
  pieces.

  The data is muxed from all streams and provided in a prio order - at the
  time of the calling of this function.
 
  The amount of data this function can return in a single call may be capped
  to a certain maximum level. Therefore, an application should rather call
  this function repeated times to get updated values after data has been sent
  off (and spindly_phys_sent was called).

  NOTE: This function will return SPINDLYE_INVAL if earlier data has not been
  reported fully with spindly_phys_sent(), or if the data callback is non-NULL.

RESULT = spindly_phys_sent(PHYS, LENGTH);

  Tell Spindly how many bytes of the data that has been sent and should be
  considered consumed. The PHYS will then contain updated information of
  amount of remaining data to send etc.

RESULT = spindly_phys_settings(PHYS, SETTINGS);

  Change one or more settings associated with the connection. This will result
  in a SPINDLY_DX_SETTINGS message to end up on the remote side.

void spindly_phys_cleanup(PHYS);

  Cleanup the entire connection and all associated streams and data.


handle separate streams over the physical connection
====================================================

RESULT = spindly_stream_new(PHYS, PRIO, &STREAM, CUSTOMP, CONFIG);

  Creates a request for a new stream and muxes the request into the output
  connection, creates a STREAM handle for the new stream and returns the
  RESULT. The CUSTOMP pointer will be associated with the STREAM to allow the
  application to identify it.

  PRIO is a priority, 0 - 7 where 0 is the most important.

  Note that the stream is not yet ready to be used until it has been
  acknowledged by the peer and we get a SPINDLY_DX_STREAM_ACK response.

  CONFIG is NULL or a pointer to a stream config struct with the following
  fields:

    age      - should be set to SPINDLY_CONFIG_AGE
    consumed - callback function to call when 'data' or 'headers' have
               completed. The HANDLED pointer is passed on in addition to the
               CUSTOMP one.

RESULT = spindly_stream_ack(STREAM);

  The STREAM as requested to get opened by the remote is allowed!

RESULT = spindly_stream_nack(STREAM);

  The STREAM as requested to get opened by the remote is NOT allowed!

RESULT = spindly_stream_close(STREAM);

  Close the STREAM. Can be used as a response to a SPINDLY_DX_STREAM_KILL
  message or it will generate such a message to the other side.

RESULT = spindly_stream_data(STREAM, DATA, DATALEN, HANDLED);

  Send data on this specific stream. If the stream is not yet acked by the
  remote, the data will be held locally until it gets acked and sent later.

  This function will not copy data. It will just store a reference to it.  The
  application is responsible to maintain the data until spindly has called the
  callback telling that the data has been consumed.

  HANDLED is a custom pointer. It will be passed in to the STREAM->consumed
  callback when this data chunk has been handled by spindly.

  When adding data or headers etc on multiple streams, it should be noted that
  the streams' outgoing buffers are drained in prio order when
  spindly_phys_outgoing() is called.

RESULT = spindly_stream_headers(STREAM, HEADERS, &HANDLED);

  Send headers on this specific stream.

  This function will not copy data. It will just store a reference to it.  The
  application is responsible to maintain the data until spindly has called the
  callback telling that the data has been consumed.

  HANDLED is a custom pointer. It will be passed in to the STREAM->consumed
  callback when these headers have been handled by spindly.

RESULT = spindly_stream_window(STREAM, DELTA);

  TODO: Modify the WINDOW SIZE with DELTA ...

PHYS = spindly_stream_getphys(STREAM);

  Figure out the physical handle a particular stream is associated with.


HTTP helpers
============

 uhm...


Utility functions
=================

RESULT = spindly_version(REQUIRED, &STRING)

  Returns the version number (as an integer) if it is of the REQUIRED version
  or better, and an error if not. STRING will then be a pointer to the version
  string.




==============================================================================
 Pseudo code: an app that sets up two streams over a phyiscal connection in
 the client side.
==============================================================================


 PHYS = spindly_phys_init(CLIENT, 2);

 spindly_stream_new(PHYS, &STREAM1, "1");

 spindly_stream_new(PHYS, &STREAM2, "2");

 spindly_phys_outgoing(PHYS, &DATATOSEND);

 send(DATATOSEND); /* over TCP to the physical server */

 while( !until data comes OR data can be sent ) {

   do {
     spindly_phys_outgoing(PHYS, &data, &len);
     if(len) { /* there is data to send */
       bytes_sent = send(TCP, data, len);

       /* tell spindly how much we actually sent */
       spindly_phys_sent(PHYS, bytes_sent);

       if(bytes_sent != len)
         break; /* we filled up */
     }
   } while (len); /* as long as there were chunks, go on */

   number_of_bytes = recv( storeincoming ); /* read from TCP */

   spindly_phys_incoming(PHYS, storeincoming, number_of_bytes);

   do {
     spindly_phys_demux(PHYS, &MESSAGE, &PTR);

     switch(MESSAGE) {
       case SPINDLY_DX_NONE:
         /* no message in the pipe */
         break;
       case SPINDLY_DX_STREAM_ACK:
         /* one (more) of our streams is now setup, send data */
         spindly_stream_send(PTR->stream, "hello", 5);
         break;
       case SPINDLY_DX_STREAM_REQ:
         /* the peer wants to setup a stream, allow it? */
         spindly_stream_ack(PTR->stream); /* sure! */
         break;
       case SPINDLY_DX_STREAM_KILL:
         /* the stream is killed, kill the stream handle */
         spindly_stream_close(PTR->stream);
         break;
       case SPINDLY_DX_DATA:
         /* data arrives on a stream */
         write(1, PTR->data, PTR->len); /* write to stdout */
         break;
       ...
     }

     /* loop around as long as there are messages to handle */
   } while( MESSAGE != SPINDLY_DX_NONE );

 } /* while () */ 
